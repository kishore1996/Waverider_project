/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.waverider_project.app_tables.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.waverider_project.app_tables.JobRunHistory;
import com.waverider_project.app_tables.service.JobRunHistoryService;


/**
 * Controller object for domain model class JobRunHistory.
 * @see JobRunHistory
 */
@RestController("App_Tables.JobRunHistoryController")
@Api(value = "JobRunHistoryController", description = "Exposes APIs to work with JobRunHistory resource.")
@RequestMapping("/App_Tables/JobRunHistory")
public class JobRunHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobRunHistoryController.class);

    @Autowired
	@Qualifier("App_Tables.JobRunHistoryService")
	private JobRunHistoryService jobRunHistoryService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new JobRunHistory instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public JobRunHistory createJobRunHistory(@RequestBody JobRunHistory jobRunHistory) {
		LOGGER.debug("Create JobRunHistory with information: {}" , jobRunHistory);

		jobRunHistory = jobRunHistoryService.create(jobRunHistory);
		LOGGER.debug("Created JobRunHistory with information: {}" , jobRunHistory);

	    return jobRunHistory;
	}

    @ApiOperation(value = "Returns the JobRunHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public JobRunHistory getJobRunHistory(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting JobRunHistory with id: {}" , id);

        JobRunHistory foundJobRunHistory = jobRunHistoryService.getById(id);
        LOGGER.debug("JobRunHistory details with id: {}" , foundJobRunHistory);

        return foundJobRunHistory;
    }

    @ApiOperation(value = "Updates the JobRunHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public JobRunHistory editJobRunHistory(@PathVariable("id") Integer id, @RequestBody JobRunHistory jobRunHistory) {
        LOGGER.debug("Editing JobRunHistory with id: {}" , jobRunHistory.getId());

        jobRunHistory.setId(id);
        jobRunHistory = jobRunHistoryService.update(jobRunHistory);
        LOGGER.debug("JobRunHistory details with id: {}" , jobRunHistory);

        return jobRunHistory;
    }
    
    @ApiOperation(value = "Partially updates the JobRunHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public JobRunHistory patchJobRunHistory(@PathVariable("id") Integer id, @RequestBody @MapTo(JobRunHistory.class) Map<String, Object> jobRunHistoryPatch) {
        LOGGER.debug("Partially updating JobRunHistory with id: {}" , id);

        JobRunHistory jobRunHistory = jobRunHistoryService.partialUpdate(id, jobRunHistoryPatch);
        LOGGER.debug("JobRunHistory details after partial update: {}" , jobRunHistory);

        return jobRunHistory;
    }

    @ApiOperation(value = "Deletes the JobRunHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteJobRunHistory(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting JobRunHistory with id: {}" , id);

        JobRunHistory deletedJobRunHistory = jobRunHistoryService.delete(id);

        return deletedJobRunHistory != null;
    }

    /**
     * @deprecated Use {@link #findJobRunHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of JobRunHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<JobRunHistory> searchJobRunHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering JobRunHistories list by query filter:{}", (Object) queryFilters);
        return jobRunHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of JobRunHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<JobRunHistory> findJobRunHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering JobRunHistories list by filter:", query);
        return jobRunHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of JobRunHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<JobRunHistory> filterJobRunHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering JobRunHistories list by filter", query);
        return jobRunHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportJobRunHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return jobRunHistoryService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportJobRunHistoriesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = JobRunHistory.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> jobRunHistoryService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of JobRunHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countJobRunHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting JobRunHistories");
		return jobRunHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getJobRunHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return jobRunHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service JobRunHistoryService instance
	 */
	protected void setJobRunHistoryService(JobRunHistoryService service) {
		this.jobRunHistoryService = service;
	}

}
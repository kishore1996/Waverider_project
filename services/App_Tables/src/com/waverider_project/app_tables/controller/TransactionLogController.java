/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.waverider_project.app_tables.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.waverider_project.app_tables.TransactionLog;
import com.waverider_project.app_tables.service.TransactionLogService;


/**
 * Controller object for domain model class TransactionLog.
 * @see TransactionLog
 */
@RestController("App_Tables.TransactionLogController")
@Api(value = "TransactionLogController", description = "Exposes APIs to work with TransactionLog resource.")
@RequestMapping("/App_Tables/TransactionLog")
public class TransactionLogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionLogController.class);

    @Autowired
	@Qualifier("App_Tables.TransactionLogService")
	private TransactionLogService transactionLogService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TransactionLog instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionLog createTransactionLog(@RequestBody TransactionLog transactionLog) {
		LOGGER.debug("Create TransactionLog with information: {}" , transactionLog);

		transactionLog = transactionLogService.create(transactionLog);
		LOGGER.debug("Created TransactionLog with information: {}" , transactionLog);

	    return transactionLog;
	}

    @ApiOperation(value = "Returns the TransactionLog instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionLog getTransactionLog(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TransactionLog with id: {}" , id);

        TransactionLog foundTransactionLog = transactionLogService.getById(id);
        LOGGER.debug("TransactionLog details with id: {}" , foundTransactionLog);

        return foundTransactionLog;
    }

    @ApiOperation(value = "Updates the TransactionLog instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionLog editTransactionLog(@PathVariable("id") Integer id, @RequestBody TransactionLog transactionLog) {
        LOGGER.debug("Editing TransactionLog with id: {}" , transactionLog.getId());

        transactionLog.setId(id);
        transactionLog = transactionLogService.update(transactionLog);
        LOGGER.debug("TransactionLog details with id: {}" , transactionLog);

        return transactionLog;
    }
    
    @ApiOperation(value = "Partially updates the TransactionLog instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TransactionLog patchTransactionLog(@PathVariable("id") Integer id, @RequestBody @MapTo(TransactionLog.class) Map<String, Object> transactionLogPatch) {
        LOGGER.debug("Partially updating TransactionLog with id: {}" , id);

        TransactionLog transactionLog = transactionLogService.partialUpdate(id, transactionLogPatch);
        LOGGER.debug("TransactionLog details after partial update: {}" , transactionLog);

        return transactionLog;
    }

    @ApiOperation(value = "Deletes the TransactionLog instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTransactionLog(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TransactionLog with id: {}" , id);

        TransactionLog deletedTransactionLog = transactionLogService.delete(id);

        return deletedTransactionLog != null;
    }

    /**
     * @deprecated Use {@link #findTransactionLogs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TransactionLog instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TransactionLog> searchTransactionLogsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TransactionLogs list by query filter:{}", (Object) queryFilters);
        return transactionLogService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TransactionLog instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TransactionLog> findTransactionLogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TransactionLogs list by filter:", query);
        return transactionLogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TransactionLog instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<TransactionLog> filterTransactionLogs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TransactionLogs list by filter", query);
        return transactionLogService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportTransactionLogs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return transactionLogService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportTransactionLogsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TransactionLog.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> transactionLogService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TransactionLog instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countTransactionLogs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TransactionLogs");
		return transactionLogService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getTransactionLogAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return transactionLogService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TransactionLogService instance
	 */
	protected void setTransactionLogService(TransactionLogService service) {
		this.transactionLogService = service;
	}

}
/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.waverider_project.app_tables.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.waverider_project.app_tables.service.App_TablesQueryExecutorService;
import com.waverider_project.app_tables.models.query.*;

@RestController(value = "App_Tables.QueryExecutionController")
@RequestMapping("/App_Tables/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private App_TablesQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/yettoruncount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "number of yet to run count")
    public Page<YettoruncountResponse> executeYettoruncount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: yettoruncount");
        Page<YettoruncountResponse> _result = queryService.executeYettoruncount(pageable);
        LOGGER.debug("got the result for named query: yettoruncount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query yettoruncount")
    @RequestMapping(value = "/queries/yettoruncount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportYettoruncount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: yettoruncount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "yettoruncount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportYettoruncount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Nofilecount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "number of no file jobs")
    public Page<NofilecountResponse> executeNofilecount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Nofilecount");
        Page<NofilecountResponse> _result = queryService.executeNofilecount(pageable);
        LOGGER.debug("got the result for named query: Nofilecount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Nofilecount")
    @RequestMapping(value = "/queries/Nofilecount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportNofilecount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Nofilecount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Nofilecount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportNofilecount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/starterrorcount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "number of start errors")
    public Page<StarterrorcountResponse> executeStarterrorcount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: starterrorcount");
        Page<StarterrorcountResponse> _result = queryService.executeStarterrorcount(pageable);
        LOGGER.debug("got the result for named query: starterrorcount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query starterrorcount")
    @RequestMapping(value = "/queries/starterrorcount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportStarterrorcount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: starterrorcount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "starterrorcount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportStarterrorcount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Failcount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "number of fail count")
    public Page<FailcountResponse> executeFailcount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Failcount");
        Page<FailcountResponse> _result = queryService.executeFailcount(pageable);
        LOGGER.debug("got the result for named query: Failcount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Failcount")
    @RequestMapping(value = "/queries/Failcount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportFailcount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Failcount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Failcount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportFailcount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/currentdate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "displays current date")
    public Page<CurrentdateResponse> executeCurrentdate(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: currentdate");
        Page<CurrentdateResponse> _result = queryService.executeCurrentdate(pageable);
        LOGGER.debug("got the result for named query: currentdate, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query currentdate")
    @RequestMapping(value = "/queries/currentdate/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportCurrentdate(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: currentdate");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "currentdate";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportCurrentdate( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Passcount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Number of pass counts")
    public Page<PasscountResponse> executePasscount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Passcount");
        Page<PasscountResponse> _result = queryService.executePasscount(pageable);
        LOGGER.debug("got the result for named query: Passcount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Passcount")
    @RequestMapping(value = "/queries/Passcount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportPasscount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Passcount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Passcount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportPasscount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/Jobcount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "number of job count")
    public Page<JobcountResponse> executeJobcount(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: Jobcount");
        Page<JobcountResponse> _result = queryService.executeJobcount(pageable);
        LOGGER.debug("got the result for named query: Jobcount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query Jobcount")
    @RequestMapping(value = "/queries/Jobcount/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportJobcount(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: Jobcount");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "Jobcount";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportJobcount( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/current_datetime", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "displays current date and time")
    public Page<CurrentDatetimeResponse> executeCurrent_datetime(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: current_datetime");
        Page<CurrentDatetimeResponse> _result = queryService.executeCurrent_datetime(pageable);
        LOGGER.debug("got the result for named query: current_datetime, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query current_datetime")
    @RequestMapping(value = "/queries/current_datetime/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportCurrent_datetime(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: current_datetime");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "current_datetime";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportCurrent_datetime( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}
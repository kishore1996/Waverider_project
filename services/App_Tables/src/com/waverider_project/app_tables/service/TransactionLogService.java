/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.waverider_project.app_tables.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.waverider_project.app_tables.TransactionLog;

/**
 * Service object for domain model class {@link TransactionLog}.
 */
public interface TransactionLogService {

    /**
     * Creates a new TransactionLog. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionLog if any.
     *
     * @param transactionLog Details of the TransactionLog to be created; value cannot be null.
     * @return The newly created TransactionLog.
     */
    TransactionLog create(@Valid TransactionLog transactionLog);


	/**
     * Returns TransactionLog by given id if exists.
     *
     * @param transactionlogId The id of the TransactionLog to get; value cannot be null.
     * @return TransactionLog associated with the given transactionlogId.
	 * @throws EntityNotFoundException If no TransactionLog is found.
     */
    TransactionLog getById(Integer transactionlogId);

    /**
     * Find and return the TransactionLog by given id if exists, returns null otherwise.
     *
     * @param transactionlogId The id of the TransactionLog to get; value cannot be null.
     * @return TransactionLog associated with the given transactionlogId.
     */
    TransactionLog findById(Integer transactionlogId);

	/**
     * Find and return the list of TransactionLogs by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param transactionlogIds The id's of the TransactionLog to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return TransactionLogs associated with the given transactionlogIds.
     */
    List<TransactionLog> findByMultipleIds(List<Integer> transactionlogIds, boolean orderedReturn);


    /**
     * Updates the details of an existing TransactionLog. It replaces all fields of the existing TransactionLog with the given transactionLog.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionLog if any.
     *
     * @param transactionLog The details of the TransactionLog to be updated; value cannot be null.
     * @return The updated TransactionLog.
     * @throws EntityNotFoundException if no TransactionLog is found with given input.
     */
    TransactionLog update(@Valid TransactionLog transactionLog);


    /**
     * Partially updates the details of an existing TransactionLog. It updates only the
     * fields of the existing TransactionLog which are passed in the transactionLogPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TransactionLog if any.
     *
     * @param transactionlogId The id of the TransactionLog to be deleted; value cannot be null.
     * @param transactionLogPatch The partial data of TransactionLog which is supposed to be updated; value cannot be null.
     * @return The updated TransactionLog.
     * @throws EntityNotFoundException if no TransactionLog is found with given input.
     */
    TransactionLog partialUpdate(Integer transactionlogId, Map<String, Object> transactionLogPatch);

    /**
     * Deletes an existing TransactionLog with the given id.
     *
     * @param transactionlogId The id of the TransactionLog to be deleted; value cannot be null.
     * @return The deleted TransactionLog.
     * @throws EntityNotFoundException if no TransactionLog found with the given id.
     */
    TransactionLog delete(Integer transactionlogId);

    /**
     * Deletes an existing TransactionLog with the given object.
     *
     * @param transactionLog The instance of the TransactionLog to be deleted; value cannot be null.
     */
    void delete(TransactionLog transactionLog);

    /**
     * Find all TransactionLogs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TransactionLogs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<TransactionLog> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all TransactionLogs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TransactionLogs.
     *
     * @see Pageable
     * @see Page
     */
    Page<TransactionLog> findAll(String query, Pageable pageable);

    /**
     * Exports all TransactionLogs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all TransactionLogs matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the TransactionLogs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the TransactionLog.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
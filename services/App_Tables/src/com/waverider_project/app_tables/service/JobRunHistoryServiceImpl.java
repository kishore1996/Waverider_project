/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.waverider_project.app_tables.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.waverider_project.app_tables.JobRunHistory;


/**
 * ServiceImpl object for domain model class JobRunHistory.
 *
 * @see JobRunHistory
 */
@Service("App_Tables.JobRunHistoryService")
@Validated
public class JobRunHistoryServiceImpl implements JobRunHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobRunHistoryServiceImpl.class);


    @Autowired
    @Qualifier("App_Tables.JobRunHistoryDao")
    private WMGenericDao<JobRunHistory, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<JobRunHistory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public JobRunHistory create(JobRunHistory jobRunHistory) {
        LOGGER.debug("Creating a new JobRunHistory with information: {}", jobRunHistory);

        JobRunHistory jobRunHistoryCreated = this.wmGenericDao.create(jobRunHistory);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(jobRunHistoryCreated);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public JobRunHistory getById(Integer jobrunhistoryId) {
        LOGGER.debug("Finding JobRunHistory by id: {}", jobrunhistoryId);
        return this.wmGenericDao.findById(jobrunhistoryId);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public JobRunHistory findById(Integer jobrunhistoryId) {
        LOGGER.debug("Finding JobRunHistory by id: {}", jobrunhistoryId);
        try {
            return this.wmGenericDao.findById(jobrunhistoryId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No JobRunHistory found with id: {}", jobrunhistoryId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public List<JobRunHistory> findByMultipleIds(List<Integer> jobrunhistoryIds, boolean orderedReturn) {
        LOGGER.debug("Finding JobRunHistories by ids: {}", jobrunhistoryIds);

        return this.wmGenericDao.findByMultipleIds(jobrunhistoryIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "App_TablesTransactionManager")
    @Override
    public JobRunHistory update(JobRunHistory jobRunHistory) {
        LOGGER.debug("Updating JobRunHistory with information: {}", jobRunHistory);

        this.wmGenericDao.update(jobRunHistory);
        this.wmGenericDao.refresh(jobRunHistory);

        return jobRunHistory;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public JobRunHistory partialUpdate(Integer jobrunhistoryId, Map<String, Object>jobRunHistoryPatch) {
        LOGGER.debug("Partially Updating the JobRunHistory with id: {}", jobrunhistoryId);

        JobRunHistory jobRunHistory = getById(jobrunhistoryId);

        try {
            ObjectReader jobRunHistoryReader = this.objectMapper.reader().forType(JobRunHistory.class).withValueToUpdate(jobRunHistory);
            jobRunHistory = jobRunHistoryReader.readValue(this.objectMapper.writeValueAsString(jobRunHistoryPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", jobRunHistoryPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        jobRunHistory = update(jobRunHistory);

        return jobRunHistory;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public JobRunHistory delete(Integer jobrunhistoryId) {
        LOGGER.debug("Deleting JobRunHistory with id: {}", jobrunhistoryId);
        JobRunHistory deleted = this.wmGenericDao.findById(jobrunhistoryId);
        if (deleted == null) {
            LOGGER.debug("No JobRunHistory found with id: {}", jobrunhistoryId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), JobRunHistory.class.getSimpleName(), jobrunhistoryId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public void delete(JobRunHistory jobRunHistory) {
        LOGGER.debug("Deleting JobRunHistory with {}", jobRunHistory);
        this.wmGenericDao.delete(jobRunHistory);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<JobRunHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JobRunHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<JobRunHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JobRunHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service App_Tables for table JobRunHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service App_Tables for table JobRunHistory to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.waverider_project.app_tables.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.waverider_project.app_tables.JobRunSchedule;


/**
 * ServiceImpl object for domain model class JobRunSchedule.
 *
 * @see JobRunSchedule
 */
@Service("App_Tables.JobRunScheduleService")
@Validated
public class JobRunScheduleServiceImpl implements JobRunScheduleService {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobRunScheduleServiceImpl.class);


    @Autowired
    @Qualifier("App_Tables.JobRunScheduleDao")
    private WMGenericDao<JobRunSchedule, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<JobRunSchedule, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public JobRunSchedule create(JobRunSchedule jobRunSchedule) {
        LOGGER.debug("Creating a new JobRunSchedule with information: {}", jobRunSchedule);

        JobRunSchedule jobRunScheduleCreated = this.wmGenericDao.create(jobRunSchedule);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(jobRunScheduleCreated);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public JobRunSchedule getById(Integer jobrunscheduleId) {
        LOGGER.debug("Finding JobRunSchedule by id: {}", jobrunscheduleId);
        return this.wmGenericDao.findById(jobrunscheduleId);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public JobRunSchedule findById(Integer jobrunscheduleId) {
        LOGGER.debug("Finding JobRunSchedule by id: {}", jobrunscheduleId);
        try {
            return this.wmGenericDao.findById(jobrunscheduleId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No JobRunSchedule found with id: {}", jobrunscheduleId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public List<JobRunSchedule> findByMultipleIds(List<Integer> jobrunscheduleIds, boolean orderedReturn) {
        LOGGER.debug("Finding JobRunSchedules by ids: {}", jobrunscheduleIds);

        return this.wmGenericDao.findByMultipleIds(jobrunscheduleIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "App_TablesTransactionManager")
    @Override
    public JobRunSchedule update(JobRunSchedule jobRunSchedule) {
        LOGGER.debug("Updating JobRunSchedule with information: {}", jobRunSchedule);

        this.wmGenericDao.update(jobRunSchedule);
        this.wmGenericDao.refresh(jobRunSchedule);

        return jobRunSchedule;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public JobRunSchedule partialUpdate(Integer jobrunscheduleId, Map<String, Object>jobRunSchedulePatch) {
        LOGGER.debug("Partially Updating the JobRunSchedule with id: {}", jobrunscheduleId);

        JobRunSchedule jobRunSchedule = getById(jobrunscheduleId);

        try {
            ObjectReader jobRunScheduleReader = this.objectMapper.reader().forType(JobRunSchedule.class).withValueToUpdate(jobRunSchedule);
            jobRunSchedule = jobRunScheduleReader.readValue(this.objectMapper.writeValueAsString(jobRunSchedulePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", jobRunSchedulePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        jobRunSchedule = update(jobRunSchedule);

        return jobRunSchedule;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public JobRunSchedule delete(Integer jobrunscheduleId) {
        LOGGER.debug("Deleting JobRunSchedule with id: {}", jobrunscheduleId);
        JobRunSchedule deleted = this.wmGenericDao.findById(jobrunscheduleId);
        if (deleted == null) {
            LOGGER.debug("No JobRunSchedule found with id: {}", jobrunscheduleId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), JobRunSchedule.class.getSimpleName(), jobrunscheduleId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public void delete(JobRunSchedule jobRunSchedule) {
        LOGGER.debug("Deleting JobRunSchedule with {}", jobRunSchedule);
        this.wmGenericDao.delete(jobRunSchedule);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<JobRunSchedule> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all JobRunSchedules");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<JobRunSchedule> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all JobRunSchedules");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service App_Tables for table JobRunSchedule to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service App_Tables for table JobRunSchedule to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
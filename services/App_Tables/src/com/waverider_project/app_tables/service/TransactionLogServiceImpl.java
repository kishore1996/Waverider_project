/*Copyright (c) 2019-2020 imaginea.com All Rights Reserved.
 This software is the confidential and proprietary information of imaginea.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with imaginea.com*/
package com.waverider_project.app_tables.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.waverider_project.app_tables.TransactionLog;


/**
 * ServiceImpl object for domain model class TransactionLog.
 *
 * @see TransactionLog
 */
@Service("App_Tables.TransactionLogService")
@Validated
public class TransactionLogServiceImpl implements TransactionLogService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionLogServiceImpl.class);


    @Autowired
    @Qualifier("App_Tables.TransactionLogDao")
    private WMGenericDao<TransactionLog, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<TransactionLog, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public TransactionLog create(TransactionLog transactionLog) {
        LOGGER.debug("Creating a new TransactionLog with information: {}", transactionLog);

        TransactionLog transactionLogCreated = this.wmGenericDao.create(transactionLog);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(transactionLogCreated);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public TransactionLog getById(Integer transactionlogId) {
        LOGGER.debug("Finding TransactionLog by id: {}", transactionlogId);
        return this.wmGenericDao.findById(transactionlogId);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public TransactionLog findById(Integer transactionlogId) {
        LOGGER.debug("Finding TransactionLog by id: {}", transactionlogId);
        try {
            return this.wmGenericDao.findById(transactionlogId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TransactionLog found with id: {}", transactionlogId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public List<TransactionLog> findByMultipleIds(List<Integer> transactionlogIds, boolean orderedReturn) {
        LOGGER.debug("Finding TransactionLogs by ids: {}", transactionlogIds);

        return this.wmGenericDao.findByMultipleIds(transactionlogIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "App_TablesTransactionManager")
    @Override
    public TransactionLog update(TransactionLog transactionLog) {
        LOGGER.debug("Updating TransactionLog with information: {}", transactionLog);

        this.wmGenericDao.update(transactionLog);
        this.wmGenericDao.refresh(transactionLog);

        return transactionLog;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public TransactionLog partialUpdate(Integer transactionlogId, Map<String, Object>transactionLogPatch) {
        LOGGER.debug("Partially Updating the TransactionLog with id: {}", transactionlogId);

        TransactionLog transactionLog = getById(transactionlogId);

        try {
            ObjectReader transactionLogReader = this.objectMapper.reader().forType(TransactionLog.class).withValueToUpdate(transactionLog);
            transactionLog = transactionLogReader.readValue(this.objectMapper.writeValueAsString(transactionLogPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", transactionLogPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        transactionLog = update(transactionLog);

        return transactionLog;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public TransactionLog delete(Integer transactionlogId) {
        LOGGER.debug("Deleting TransactionLog with id: {}", transactionlogId);
        TransactionLog deleted = this.wmGenericDao.findById(transactionlogId);
        if (deleted == null) {
            LOGGER.debug("No TransactionLog found with id: {}", transactionlogId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), TransactionLog.class.getSimpleName(), transactionlogId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "App_TablesTransactionManager")
    @Override
    public void delete(TransactionLog transactionLog) {
        LOGGER.debug("Deleting TransactionLog with {}", transactionLog);
        this.wmGenericDao.delete(transactionLog);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<TransactionLog> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TransactionLogs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<TransactionLog> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TransactionLogs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service App_Tables for table TransactionLog to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service App_Tables for table TransactionLog to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "App_TablesTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}